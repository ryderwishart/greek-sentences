import { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import InfiniteScroll from 'react-infinite-scroll-component';

const dev = process.env.NODE_ENV !== 'production';

export const server = dev
  ? 'http://localhost:3000'
  : 'https://greek-sentences.vercel.app';

const inter = Inter({ subsets: ['latin'] });

function latinToGreek(input) {
  const latinToGreekMap = {
    // Add Latin to Greek character mappings here
    'a': 'α',
    'b': 'β',
    'g': 'γ',
    'd': 'δ',
    'e': 'ε',
    'z': 'ζ',
    'h': 'η',
    'q': 'θ',
    'i': 'ι',
    'k': 'κ',
    'l': 'λ',
    'm': 'μ',
    'n': 'ν',
    'c': 'ξ',
    'o': 'ο',
    'p': 'π',
    'r': 'ρ',
    // 's' maps to 'σ' and 'ς', so when we map 's' to 'σ', we need to replace 'ς' in the input string with 'σ'
    's': 'σ',
    't': 'τ',
    'u': 'υ',
    'f': 'φ',
    'y': 'ψ',
    'w': 'ω',
    'j': 'ϗ',
    'v': 'Ϝ',
    'x': 'χ',
  };
  // let cleanedInput = input.replace(/ς/g, 'σ');
  // actually, only replace sigma with final sigma if it's the last character in the word (followed by a space or punctuation, or the end of the string) - cannot use \b to match the end of the string
  console.log('input', input)
  let cleanedInput = input.replace(/σ(?=[\s.,;:!?])/g, 'ς');
  console.log('cleanedInput', cleanedInput)
  return cleanedInput.split('').map(char => latinToGreekMap[char] || char).join('');
}

const downloadCSV = () => {
  const headers = ['id', 'sentence'];
  const csvContent = [headers, ...results.map((result) => [result.id, result.sentence])]
    .map((row) => row.join(','))
    .join('\n');
  const csvBlob = new Blob([csvContent], { type: 'text/csv' });
  const csvUrl = URL.createObjectURL(csvBlob);
  const link = document.createElement('a');
  link.href = csvUrl;
  link.download = 'search-results.csv';
  link.click();
  URL.revokeObjectURL(csvUrl);
};

export default function Home() {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);

    let url = `${server}/api/search?`;
    // Split on commas and trim whitespace.
    const terms = query.split(',').map((term) => term.trim());
    // Loop through the terms and encode each one and add it to the URL.
    terms.forEach((term, index) => {
      // replace whitespace with %20, but keep unicode greek characters intact
      const encodedTerm = term.replace(/ /g, '%20')
      url += `query=${encodedTerm}`;
      if (index < terms.length - 1) {
        url += '&';
      }
    });

    // Fetch the results and handle them as needed.
    const response = await fetch(url);
    const results = await response.json()
    console.log(results);
    setResults(results || ['No results found']);
    setLoading(false);
  };

  return (
    <>
      <>
        <Head>
          <title>Greek Sentences</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className={styles.main}>
          <div className={styles.description}>

            {/* <Image
              className={styles.logo}
              src="/next.svg"
              alt="Next.js Logo"
              width={180}
              height={37}
              priority
            /> */}
            <h1 className={inter.className}>
              Search Greek Sentences
            </h1>
            <p className={inter.className}>
              Search for Greek sentences containing a given word. Multiple search terms should be separated by a comma. For example, "ἀγαθός, ἀγαθότης" will return sentences containing either ἀγαθός and ἀγαθότης, but "ἀγαθός ἀγαθότης" will return sentences containing ἀγαθός ἀγαθότης exactly. Accents and breathing marks are stripped from the search terms.
            </p>
            <form onSubmit={handleSubmit} className={styles.searchForm}>
              <input
                type="text"
                value={query}
                onChange={(event) => setQuery(latinToGreek(event.target.value))}
                placeholder="Enter a search term"
              />
              <button type="submit">Search</button>
              <button onClick={downloadCSV} disabled={results.length === 0}>
                Download Results as CSV
              </button>
              {
                results.length > 0 &&
                <p>{results.length} results found</p>
              }
            </form>
          </div>
          {
            results.count > 0 &&
            <div>
              Number of hits:
              <span>
                {results.count}
              </span> in
              <span> {results.time} seconds</span>
            </div>
          }
          {
            <InfiniteScroll
              dataLength={results.length}
              next={() => { }}
              hasMore={false}
              loader={loading ? <h4>Loading...</h4> : null}
              endMessage={<p>All results displayed.</p>}
              className={styles.grid}
            >
              {/* Example result: {"id":36218,"filename":"tlg1443.tlg005.1st1K-grc1","tokens":"εἰ γὰρ μέχρι νῦν κατὰ Ἰουδαῖσμὸν ζῶμεν, ὁμολογοῦμεν χάριν μὴ εἰληφέναι.","lemmas":"εἰ γάρ μέχρι νῦν κατά ζήω , ὁμολογέω χάρις μή λαμβάνω .","metadata":{"author":"Ignatius Antiochenus\n","geographicLocation":"Antakya, Hatay Province, Turkey","centuryOfAuthorLifetime":"35 CE-108 CE","workTitle":"Ad Magnesios (epist. 2)","dateRangeOfWork":"80 CE-100 CE","urn":"urn:cts:greekLit:tlg1443.tlg005.1st1K-grc1","genre":"Epistles","notes":null,"authorWorkId":"tlg1443.tlg005","authorId":"1443","workId":"005","name":"IGNATIUS","tags":"Scr. Eccl.","id":"1443"}} */}
              {results.results && results.results.map((result, index) => (
                <a className={styles.card} key={index + result.filename}>
                  {/* {JSON.stringify(result)} */}
                  <div className={styles.metadataRow}>
                    <p className={inter.className}>{result.metadata.author}: {result.metadata.workTitle}</p>
                    <p className={inter.className}>{result.metadata.geographicLocation}</p>
                    <p className={inter.className}>{result.metadata.dateRangeOfWork}</p>
                    <p className={inter.className}>{result.metadata.genre}</p>
                    <p className={inter.className}>{result.metadata.tags}</p>
                  </div>
                  <span className={styles.textContent}>{result.tokens}</span>
                  {/* <p className={inter.className}>{result.metadata.author} - {result.metadata.workTitle}</p> */}
                </a>
              ))}
            </InfiniteScroll>
          }
        </main>
      </>
    </>
  );
}
